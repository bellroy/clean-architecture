# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dry-matcher` gem.
# Please instead update this file by running `bin/tapioca gem dry-matcher`.

# typed: true

module Dry
  class << self
    def Equalizer(*keys, **options); end
  end
end

class Dry::Matcher
  include ::Dry::Core::Constants

  def initialize(cases = T.unsafe(nil)); end

  def call(result, &block); end
  def cases; end
  def for(*methods); end

  class << self
    def for(*match_methods, with:); end
  end
end

class Dry::Matcher::Case
  def initialize(match: T.unsafe(nil), resolve: T.unsafe(nil), &block); end

  def call(value, patterns = T.unsafe(nil), &block); end
end

Dry::Matcher::Case::DEFAULT_RESOLVE = T.let(T.unsafe(nil), Proc)
Dry::Matcher::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)
Dry::Matcher::EMPTY_HASH = T.let(T.unsafe(nil), Hash)
Dry::Matcher::EMPTY_OPTS = T.let(T.unsafe(nil), Hash)
Dry::Matcher::EMPTY_SET = T.let(T.unsafe(nil), Set)
Dry::Matcher::EMPTY_STRING = T.let(T.unsafe(nil), String)

class Dry::Matcher::Evaluator
  def initialize(result, cases); end

  def call; end
  def method_missing(name, *args, &block); end

  private

  def ensure_exhaustive_match; end
  def respond_to_missing?(name, _include_private = T.unsafe(nil)); end
end

Dry::Matcher::IDENTITY = T.let(T.unsafe(nil), Proc)
class Dry::Matcher::NonExhaustiveMatchError < ::StandardError; end
Dry::Matcher::RUBY2_KEYWORDS = T.let(T.unsafe(nil), TrueClass)
Dry::Matcher::Self = T.let(T.unsafe(nil), Proc)
Dry::Matcher::Undefined = T.let(T.unsafe(nil), Object)
