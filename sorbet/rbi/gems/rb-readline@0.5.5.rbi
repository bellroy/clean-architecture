# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rb-readline` gem.
# Please instead update this file by running `bin/tapioca gem rb-readline`.

# typed: true

module RbReadline
  def history_base=(_arg0); end
  def history_length=(_arg0); end
  def rl_point=(_arg0); end

  private

  def __rl_fix_point(x); end
  def _extract_last_quote(string, quote_char); end
  def _rl_abort_internal; end
  def _rl_adjust_point(string, point); end
  def _rl_any_typein; end
  def _rl_arg_dispatch(cxt, c); end
  def _rl_arg_getchar; end
  def _rl_arg_init; end
  def _rl_arg_overflow; end
  def _rl_backspace(count); end
  def _rl_bind_tty_special_chars(kmap); end
  def _rl_char_search(count, fdir, bdir); end
  def _rl_char_search_internal(count, dir, smbchar, len); end
  def _rl_char_value(buf, ind); end
  def _rl_clean_up_for_exit; end
  def _rl_clear_screen; end
  def _rl_clear_to_eol(count); end
  def _rl_col_width(string, start, _end); end
  def _rl_compare_chars(buf1, pos1, buf2, pos2); end
  def _rl_control_keypad(on); end
  def _rl_copy_to_kill_ring(text, append); end
  def _rl_current_display_line; end
  def _rl_dispatch(key, map); end
  def _rl_dispatch_subseq(key, map, got_subseq); end
  def _rl_enable_meta_key; end
  def _rl_erase_at_end_of_line(l); end
  def _rl_erase_entire_line; end
  def _rl_find_completion_word; end
  def _rl_find_next_mbchar(string, seed, count, flags); end
  def _rl_find_prev_mbchar(string, seed, flags); end
  def _rl_fix_point(fix_mark_too); end
  def _rl_get_char_len(src); end
  def _rl_get_screen_size(tty, ignore_env); end
  def _rl_history_set_point; end
  def _rl_init_eightbit; end
  def _rl_init_line_state; end
  def _rl_init_terminal_io(terminal_name); end
  def _rl_input_available; end
  def _rl_insert_char(count, c); end
  def _rl_insert_next(count); end
  def _rl_insert_typein(c); end
  def _rl_internal_char_cleanup; end
  def _rl_internal_pager(lines); end
  def _rl_is_mbchar_matched(string, seed, _end, mbchar, length); end
  def _rl_isearch_cleanup(cxt, r); end
  def _rl_isearch_dispatch(cxt, c); end
  def _rl_isearch_fini(cxt); end
  def _rl_isearch_init(direction); end
  def _rl_make_prompt_for_search(pchar); end
  def _rl_move_cursor_relative(new, data, start = T.unsafe(nil)); end
  def _rl_move_vert(to); end
  def _rl_nsearch_abort(cxt); end
  def _rl_nsearch_cleanup(cxt, r); end
  def _rl_nsearch_dispatch(cxt, c); end
  def _rl_nsearch_dosearch(cxt); end
  def _rl_nsearch_init(dir, pchar); end
  def _rl_output_some_chars(string, start, count); end
  def _rl_overwrite_char(count, c); end
  def _rl_overwrite_rubout(count, key); end
  def _rl_read_init_file(filename, include_level); end
  def _rl_read_mbchar(mbchar, size); end
  def _rl_read_mbstring(first, mb, mlen); end
  def _rl_redisplay_after_sigwinch; end
  def _rl_replace_text(text, start, _end); end
  def _rl_reset_argument; end
  def _rl_rubout_char(count, key); end
  def _rl_scxt_alloc(type, flags); end
  def _rl_search_getchar(cxt); end
  def _rl_set_insert_mode(im, force); end
  def _rl_set_mark_at_pos(position); end
  def _rl_start_using_history; end
  def _rl_strip_prompt(pmt); end
  def _rl_subseq_getchar(key); end
  def _rl_to_lower(char); end
  def _rl_unget_char(key); end
  def _rl_update_final; end
  def _rl_vi_done_inserting; end
  def _rl_vi_initialize_line; end
  def _rl_vi_reset_last; end
  def _rl_vi_save_insert(up); end
  def _rl_vi_textmod_command(c); end
  def _rl_walphabetic(c); end
  def add_history(string); end
  def alloc_history_entry(string, ts); end
  def alloc_undo_entry(what, start, _end, text); end
  def append_to_match(text, delimiter, quote_char, nontrivial_match); end
  def bind_arrow_keys; end
  def bind_arrow_keys_internal(map); end
  def bind_termcap_arrow_keys(map); end
  def block_sigint; end
  def clear_history; end
  def compute_lcd_of_matches(match_list, matches, text); end
  def cr; end
  def cr_faster(new, cur); end
  def ctrl_char(c); end
  def current_history; end
  def delete_chars(count); end
  def display_matches(matches); end
  def endsrch_char(c); end
  def expand_prompt(pmt); end
  def fnprint(to_print); end
  def fnwidth(string); end
  def gen_completion_matches(text, start, _end, our_func, found_quote, quote_char); end
  def get_term_capabilities(buffer); end
  def get_y_or_n(for_pager); end
  def handle_parser_directive(statement); end
  def hist_inittime; end
  def history_arg_extract(first, last, string); end
  def history_base; end
  def history_get(offset); end
  def history_is_stifled; end
  def history_length; end
  def history_list; end
  def history_search_pos(string, dir, pos); end
  def history_search_prefix(string, direction); end
  def history_set_pos(pos); end
  def ibuffer_space; end
  def init_line_structures(minsize); end
  def insert_all_matches(matches, point, qc); end
  def insert_match(match, start, mtype, qc); end
  def insert_some_chars(string, count, col); end
  def inv_line(line); end
  def inv_llen(l); end
  def isascii(c); end
  def isprint(c); end
  def m_offset(margin, offset); end
  def make_history_line_current(entry); end
  def make_quoted_replacement(match, mtype, qc); end
  def meta_char(c); end
  def next_history; end
  def no_terminal?; end
  def noninc_dosearch(string, dir); end
  def noninc_search(dir, pchar); end
  def noninc_search_from_pos(string, pos, dir); end
  def parser_else(args); end
  def parser_endif(args); end
  def parser_if(args); end
  def parser_include(args); end
  def path_isdir(filename); end
  def postprocess_matches(matchesp, matching_filenames); end
  def prepare_terminal_settings(meta_flag); end
  def previous_history; end
  def print_filename(to_print, full_pathname); end
  def printable_part(pathname); end
  def prompt_ending_index; end
  def readline(prompt); end
  def readline_default_bindings; end
  def readline_initialize_everything; end
  def readline_internal; end
  def readline_internal_charloop; end
  def readline_internal_setup; end
  def readline_internal_teardown(eof); end
  def redraw_prompt(t); end
  def release_sigint; end
  def remove_duplicate_matches(matches); end
  def remove_history(which); end
  def replace_history_data(which, old, new); end
  def replace_history_entry(which, line, data); end
  def retry_if_interrupted(&block); end
  def rl_abort(count, key); end
  def rl_add_undo(what, start, _end, text); end
  def rl_alphabetic(c); end
  def rl_arrow_keys(count, c); end
  def rl_attempted_completion_function; end
  def rl_attempted_completion_function=(_arg0); end
  def rl_attempted_completion_over; end
  def rl_attempted_completion_over=(_arg0); end
  def rl_backward(count, key); end
  def rl_backward_byte(count, key); end
  def rl_backward_char(count, key); end
  def rl_backward_char_search(count, key); end
  def rl_backward_kill_line(direction, ignore); end
  def rl_backward_kill_word(count, ignore); end
  def rl_backward_word(count, key); end
  def rl_basic_quote_characters; end
  def rl_basic_quote_characters=(_arg0); end
  def rl_basic_word_break_characters; end
  def rl_basic_word_break_characters=(_arg0); end
  def rl_beg_of_line(count, key); end
  def rl_begin_undo_group; end
  def rl_beginning_of_history(count, key); end
  def rl_bind_key(key, function); end
  def rl_bind_keyseq_if_unbound(keyseq, default_func); end
  def rl_bind_keyseq_if_unbound_in_map(keyseq, default_func, kmap); end
  def rl_bind_keyseq_in_map(keyseq, function, map); end
  def rl_capitalize_word(count, key); end
  def rl_change_case(count, op); end
  def rl_char_search(count, key); end
  def rl_character_len(c, pos); end
  def rl_cleanup_after_signal; end
  def rl_clear_message; end
  def rl_clear_pending_input; end
  def rl_clear_screen(count, key); end
  def rl_clear_signals; end
  def rl_complete(ignore, invoking_key); end
  def rl_complete_internal(what_to_do); end
  def rl_completer_quote_characters; end
  def rl_completer_quote_characters=(_arg0); end
  def rl_completer_word_break_characters; end
  def rl_completer_word_break_characters=(_arg0); end
  def rl_completion_append_character; end
  def rl_completion_append_character=(_arg0); end
  def rl_completion_matches(text, entry_function); end
  def rl_copy_text(from, to); end
  def rl_crlf; end
  def rl_delete(count, key); end
  def rl_delete_horizontal_space(count, ignore); end
  def rl_delete_or_show_completions(count, key); end
  def rl_delete_text(from, to); end
  def rl_deprep_term_function; end
  def rl_deprep_term_function=(_arg0); end
  def rl_deprep_terminal; end
  def rl_digit_argument(ignore, key); end
  def rl_digit_loop; end
  def rl_ding; end
  def rl_display_match_list(matches, len, max); end
  def rl_display_search(search_string, reverse_p, where); end
  def rl_do_lowercase_version(ignore1, ignore2); end
  def rl_do_undo; end
  def rl_downcase_word(count, key); end
  def rl_emacs_editing_mode(count, key); end
  def rl_end_of_history(count, key); end
  def rl_end_of_line(count, key); end
  def rl_end_undo_group; end
  def rl_event_hook; end
  def rl_event_hook=(_arg0); end
  def rl_exchange_point_and_mark(count, key); end
  def rl_execute_next(c); end
  def rl_expand_prompt(prompt); end
  def rl_extend_line_buffer(len); end
  def rl_filename_completion_function(text, state); end
  def rl_filename_quote_characters; end
  def rl_filename_quote_characters=(_arg0); end
  def rl_forced_update_display; end
  def rl_forward(count, key); end
  def rl_forward_byte(count, key); end
  def rl_forward_char(count, key); end
  def rl_forward_search_history(sign, key); end
  def rl_forward_word(count, key); end
  def rl_free_undo_list; end
  def rl_function_of_keyseq(keyseq, map, type); end
  def rl_gather_tyi; end
  def rl_generic_bind(type, keyseq, data, map); end
  def rl_get_char; end
  def rl_get_keymap_name_from_edit_mode; end
  def rl_get_next_history(count, key); end
  def rl_get_previous_history(count, key); end
  def rl_getc(stream); end
  def rl_initialize; end
  def rl_insert(count, c); end
  def rl_insert_comment(count, key); end
  def rl_insert_completions(ignore, invoking_key); end
  def rl_insert_text(string); end
  def rl_instream; end
  def rl_instream=(_arg0); end
  def rl_isstate(x); end
  def rl_kill_full_line(count, ignore); end
  def rl_kill_line(direction, ignore); end
  def rl_kill_text(from, to); end
  def rl_kill_word(count, key); end
  def rl_library_version; end
  def rl_library_version=(_arg0); end
  def rl_line_buffer; end
  def rl_maybe_replace_line; end
  def rl_maybe_save_line; end
  def rl_maybe_unsave_line; end
  def rl_message(msg_buf); end
  def rl_modifying(start, _end); end
  def rl_named_function(name); end
  def rl_newline(count, key); end
  def rl_noninc_forward_search(count, key); end
  def rl_noninc_reverse_search(count, key); end
  def rl_on_new_line; end
  def rl_on_new_line_with_prompt; end
  def rl_outstream; end
  def rl_outstream=(_arg0); end
  def rl_overwrite_mode(count, key); end
  def rl_parse_and_bind(string); end
  def rl_point; end
  def rl_possible_completions(ignore, invoking_key); end
  def rl_prep_terminal(meta_flag); end
  def rl_quoted_insert(count, key); end
  def rl_re_read_init_file(count, ignore); end
  def rl_read_init_file(filename); end
  def rl_read_key; end
  def rl_readline_name; end
  def rl_readline_name=(_arg0); end
  def rl_redisplay; end
  def rl_refresh_line(ignore1, ignore2); end
  def rl_replace_from_history(entry, flags); end
  def rl_replace_line(text, clear_undo); end
  def rl_reset_line_state; end
  def rl_resize_terminal; end
  def rl_restart_output(count, key); end
  def rl_restore_prompt; end
  def rl_reverse_search_history(sign, key); end
  def rl_revert_line(count, key); end
  def rl_rubout(count, key); end
  def rl_rubout_or_delete(count, key); end
  def rl_save_prompt; end
  def rl_search_history(direction, invoking_key); end
  def rl_set_keymap_from_edit_mode; end
  def rl_set_mark(count, key); end
  def rl_set_prompt(prompt); end
  def rl_set_signals; end
  def rl_setstate(x); end
  def rl_sigwinch_handler(sig); end
  def rl_stuff_char(key); end
  def rl_tab_insert(count, key); end
  def rl_tilde_expand(ignore, key); end
  def rl_translate_keyseq(seq); end
  def rl_transpose_chars(count, key); end
  def rl_transpose_words(count, key); end
  def rl_tty_set_default_bindings(kmap); end
  def rl_tty_unset_default_bindings(kmap); end
  def rl_undo_command(count, key); end
  def rl_unix_filename_rubout(count, key); end
  def rl_unix_line_discard(count, key); end
  def rl_unix_word_rubout(count, key); end
  def rl_unsetstate(x); end
  def rl_upcase_word(count, key); end
  def rl_username_completion_function(text, state); end
  def rl_variable_bind(name, value); end
  def rl_vi_check; end
  def rl_vi_editing_mode(count, key); end
  def rl_vi_insertion_mode(count, key); end
  def rl_yank(count, ignore); end
  def rl_yank_last_arg(count, key); end
  def rl_yank_nth_arg(count, ignore); end
  def rl_yank_nth_arg_internal(count, ignore, history_skip); end
  def rl_yank_pop(count, key); end
  def save_tty_chars; end
  def set_completion_defaults(what_to_do); end
  def sh_set_lines_and_columns(lines, cols); end
  def space_to_eol(count); end
  def stat_char(filename); end
  def stifle_history(max); end
  def tgetflag(name); end
  def trans(i); end
  def unstifle_history; end
  def update_line(old, ostart, new, current_line, omax, nmax, inv_botlin); end
  def using_history; end
  def vis_chars(line); end
  def vis_line(line); end
  def vis_llen(l); end
  def vis_pos(line); end
  def w_offset(line, offset); end
  def where_history; end
  def whitespace(c); end

  class << self
    def __rl_fix_point(x); end
    def _extract_last_quote(string, quote_char); end
    def _rl_abort_internal; end
    def _rl_adjust_point(string, point); end
    def _rl_any_typein; end
    def _rl_arg_dispatch(cxt, c); end
    def _rl_arg_getchar; end
    def _rl_arg_init; end
    def _rl_arg_overflow; end
    def _rl_backspace(count); end
    def _rl_bind_tty_special_chars(kmap); end
    def _rl_char_search(count, fdir, bdir); end
    def _rl_char_search_internal(count, dir, smbchar, len); end
    def _rl_char_value(buf, ind); end
    def _rl_clean_up_for_exit; end
    def _rl_clear_screen; end
    def _rl_clear_to_eol(count); end
    def _rl_col_width(string, start, _end); end
    def _rl_compare_chars(buf1, pos1, buf2, pos2); end
    def _rl_control_keypad(on); end
    def _rl_copy_to_kill_ring(text, append); end
    def _rl_current_display_line; end
    def _rl_dispatch(key, map); end
    def _rl_dispatch_subseq(key, map, got_subseq); end
    def _rl_enable_meta_key; end
    def _rl_erase_at_end_of_line(l); end
    def _rl_erase_entire_line; end
    def _rl_find_completion_word; end
    def _rl_find_next_mbchar(string, seed, count, flags); end
    def _rl_find_prev_mbchar(string, seed, flags); end
    def _rl_fix_point(fix_mark_too); end
    def _rl_get_char_len(src); end
    def _rl_get_screen_size(tty, ignore_env); end
    def _rl_history_set_point; end
    def _rl_init_eightbit; end
    def _rl_init_line_state; end
    def _rl_init_terminal_io(terminal_name); end
    def _rl_input_available; end
    def _rl_insert_char(count, c); end
    def _rl_insert_next(count); end
    def _rl_insert_typein(c); end
    def _rl_internal_char_cleanup; end
    def _rl_internal_pager(lines); end
    def _rl_is_mbchar_matched(string, seed, _end, mbchar, length); end
    def _rl_isearch_cleanup(cxt, r); end
    def _rl_isearch_dispatch(cxt, c); end
    def _rl_isearch_fini(cxt); end
    def _rl_isearch_init(direction); end
    def _rl_make_prompt_for_search(pchar); end
    def _rl_move_cursor_relative(new, data, start = T.unsafe(nil)); end
    def _rl_move_vert(to); end
    def _rl_nsearch_abort(cxt); end
    def _rl_nsearch_cleanup(cxt, r); end
    def _rl_nsearch_dispatch(cxt, c); end
    def _rl_nsearch_dosearch(cxt); end
    def _rl_nsearch_init(dir, pchar); end
    def _rl_output_some_chars(string, start, count); end
    def _rl_overwrite_char(count, c); end
    def _rl_overwrite_rubout(count, key); end
    def _rl_read_init_file(filename, include_level); end
    def _rl_read_mbchar(mbchar, size); end
    def _rl_read_mbstring(first, mb, mlen); end
    def _rl_redisplay_after_sigwinch; end
    def _rl_replace_text(text, start, _end); end
    def _rl_reset_argument; end
    def _rl_rubout_char(count, key); end
    def _rl_scxt_alloc(type, flags); end
    def _rl_search_getchar(cxt); end
    def _rl_set_insert_mode(im, force); end
    def _rl_set_mark_at_pos(position); end
    def _rl_start_using_history; end
    def _rl_strip_prompt(pmt); end
    def _rl_subseq_getchar(key); end
    def _rl_to_lower(char); end
    def _rl_unget_char(key); end
    def _rl_update_final; end
    def _rl_vi_done_inserting; end
    def _rl_vi_initialize_line; end
    def _rl_vi_reset_last; end
    def _rl_vi_save_insert(up); end
    def _rl_vi_textmod_command(c); end
    def _rl_walphabetic(c); end
    def add_history(string); end
    def alloc_history_entry(string, ts); end
    def alloc_undo_entry(what, start, _end, text); end
    def append_to_match(text, delimiter, quote_char, nontrivial_match); end
    def bind_arrow_keys; end
    def bind_arrow_keys_internal(map); end
    def bind_termcap_arrow_keys(map); end
    def block_sigint; end
    def clear_history; end
    def compute_lcd_of_matches(match_list, matches, text); end
    def cr; end
    def cr_faster(new, cur); end
    def ctrl_char(c); end
    def current_history; end
    def delete_chars(count); end
    def display_matches(matches); end
    def endsrch_char(c); end
    def expand_prompt(pmt); end
    def fnprint(to_print); end
    def fnwidth(string); end
    def gen_completion_matches(text, start, _end, our_func, found_quote, quote_char); end
    def get_term_capabilities(buffer); end
    def get_y_or_n(for_pager); end
    def handle_parser_directive(statement); end
    def hist_inittime; end
    def history_arg_extract(first, last, string); end
    def history_base; end
    def history_get(offset); end
    def history_is_stifled; end
    def history_length; end
    def history_list; end
    def history_search_pos(string, dir, pos); end
    def history_search_prefix(string, direction); end
    def history_set_pos(pos); end
    def ibuffer_space; end
    def init_line_structures(minsize); end
    def insert_all_matches(matches, point, qc); end
    def insert_match(match, start, mtype, qc); end
    def insert_some_chars(string, count, col); end
    def inv_line(line); end
    def inv_llen(l); end
    def isascii(c); end
    def isprint(c); end
    def m_offset(margin, offset); end
    def make_history_line_current(entry); end
    def make_quoted_replacement(match, mtype, qc); end
    def meta_char(c); end
    def next_history; end
    def no_terminal?; end
    def noninc_dosearch(string, dir); end
    def noninc_search(dir, pchar); end
    def noninc_search_from_pos(string, pos, dir); end
    def parser_else(args); end
    def parser_endif(args); end
    def parser_if(args); end
    def parser_include(args); end
    def path_isdir(filename); end
    def postprocess_matches(matchesp, matching_filenames); end
    def prepare_terminal_settings(meta_flag); end
    def previous_history; end
    def print_filename(to_print, full_pathname); end
    def printable_part(pathname); end
    def prompt_ending_index; end
    def readline(prompt); end
    def readline_default_bindings; end
    def readline_initialize_everything; end
    def readline_internal; end
    def readline_internal_charloop; end
    def readline_internal_setup; end
    def readline_internal_teardown(eof); end
    def redraw_prompt(t); end
    def release_sigint; end
    def remove_duplicate_matches(matches); end
    def remove_history(which); end
    def replace_history_data(which, old, new); end
    def replace_history_entry(which, line, data); end
    def retry_if_interrupted(&block); end
    def rl_abort(count, key); end
    def rl_add_undo(what, start, _end, text); end
    def rl_alphabetic(c); end
    def rl_arrow_keys(count, c); end
    def rl_attempted_completion_function; end
    def rl_attempted_completion_function=(_arg0); end
    def rl_attempted_completion_over; end
    def rl_attempted_completion_over=(_arg0); end
    def rl_backward(count, key); end
    def rl_backward_byte(count, key); end
    def rl_backward_char(count, key); end
    def rl_backward_char_search(count, key); end
    def rl_backward_kill_line(direction, ignore); end
    def rl_backward_kill_word(count, ignore); end
    def rl_backward_word(count, key); end
    def rl_basic_quote_characters; end
    def rl_basic_quote_characters=(_arg0); end
    def rl_basic_word_break_characters; end
    def rl_basic_word_break_characters=(_arg0); end
    def rl_beg_of_line(count, key); end
    def rl_begin_undo_group; end
    def rl_beginning_of_history(count, key); end
    def rl_bind_key(key, function); end
    def rl_bind_keyseq_if_unbound(keyseq, default_func); end
    def rl_bind_keyseq_if_unbound_in_map(keyseq, default_func, kmap); end
    def rl_bind_keyseq_in_map(keyseq, function, map); end
    def rl_capitalize_word(count, key); end
    def rl_change_case(count, op); end
    def rl_char_search(count, key); end
    def rl_character_len(c, pos); end
    def rl_cleanup_after_signal; end
    def rl_clear_message; end
    def rl_clear_pending_input; end
    def rl_clear_screen(count, key); end
    def rl_clear_signals; end
    def rl_complete(ignore, invoking_key); end
    def rl_complete_internal(what_to_do); end
    def rl_completer_quote_characters; end
    def rl_completer_quote_characters=(_arg0); end
    def rl_completer_word_break_characters; end
    def rl_completer_word_break_characters=(_arg0); end
    def rl_completion_append_character; end
    def rl_completion_append_character=(_arg0); end
    def rl_completion_matches(text, entry_function); end
    def rl_copy_text(from, to); end
    def rl_crlf; end
    def rl_delete(count, key); end
    def rl_delete_horizontal_space(count, ignore); end
    def rl_delete_or_show_completions(count, key); end
    def rl_delete_text(from, to); end
    def rl_deprep_term_function; end
    def rl_deprep_term_function=(_arg0); end
    def rl_deprep_terminal; end
    def rl_digit_argument(ignore, key); end
    def rl_digit_loop; end
    def rl_ding; end
    def rl_display_match_list(matches, len, max); end
    def rl_display_search(search_string, reverse_p, where); end
    def rl_do_lowercase_version(ignore1, ignore2); end
    def rl_do_undo; end
    def rl_downcase_word(count, key); end
    def rl_emacs_editing_mode(count, key); end
    def rl_end_of_history(count, key); end
    def rl_end_of_line(count, key); end
    def rl_end_undo_group; end
    def rl_event_hook; end
    def rl_event_hook=(_arg0); end
    def rl_exchange_point_and_mark(count, key); end
    def rl_execute_next(c); end
    def rl_expand_prompt(prompt); end
    def rl_extend_line_buffer(len); end
    def rl_filename_completion_function(text, state); end
    def rl_filename_quote_characters; end
    def rl_filename_quote_characters=(_arg0); end
    def rl_forced_update_display; end
    def rl_forward(count, key); end
    def rl_forward_byte(count, key); end
    def rl_forward_char(count, key); end
    def rl_forward_search_history(sign, key); end
    def rl_forward_word(count, key); end
    def rl_free_undo_list; end
    def rl_function_of_keyseq(keyseq, map, type); end
    def rl_gather_tyi; end
    def rl_generic_bind(type, keyseq, data, map); end
    def rl_get_char; end
    def rl_get_keymap_name_from_edit_mode; end
    def rl_get_next_history(count, key); end
    def rl_get_previous_history(count, key); end
    def rl_getc(stream); end
    def rl_initialize; end
    def rl_insert(count, c); end
    def rl_insert_comment(count, key); end
    def rl_insert_completions(ignore, invoking_key); end
    def rl_insert_text(string); end
    def rl_instream; end
    def rl_instream=(_arg0); end
    def rl_isstate(x); end
    def rl_kill_full_line(count, ignore); end
    def rl_kill_line(direction, ignore); end
    def rl_kill_text(from, to); end
    def rl_kill_word(count, key); end
    def rl_library_version; end
    def rl_library_version=(_arg0); end
    def rl_line_buffer; end
    def rl_maybe_replace_line; end
    def rl_maybe_save_line; end
    def rl_maybe_unsave_line; end
    def rl_message(msg_buf); end
    def rl_modifying(start, _end); end
    def rl_named_function(name); end
    def rl_newline(count, key); end
    def rl_noninc_forward_search(count, key); end
    def rl_noninc_reverse_search(count, key); end
    def rl_on_new_line; end
    def rl_on_new_line_with_prompt; end
    def rl_outstream; end
    def rl_outstream=(_arg0); end
    def rl_overwrite_mode(count, key); end
    def rl_parse_and_bind(string); end
    def rl_point; end
    def rl_possible_completions(ignore, invoking_key); end
    def rl_prep_terminal(meta_flag); end
    def rl_quoted_insert(count, key); end
    def rl_re_read_init_file(count, ignore); end
    def rl_read_init_file(filename); end
    def rl_read_key; end
    def rl_readline_name; end
    def rl_readline_name=(_arg0); end
    def rl_redisplay; end
    def rl_refresh_line(ignore1, ignore2); end
    def rl_replace_from_history(entry, flags); end
    def rl_replace_line(text, clear_undo); end
    def rl_reset_line_state; end
    def rl_resize_terminal; end
    def rl_restart_output(count, key); end
    def rl_restore_prompt; end
    def rl_reverse_search_history(sign, key); end
    def rl_revert_line(count, key); end
    def rl_rubout(count, key); end
    def rl_rubout_or_delete(count, key); end
    def rl_save_prompt; end
    def rl_search_history(direction, invoking_key); end
    def rl_set_keymap_from_edit_mode; end
    def rl_set_mark(count, key); end
    def rl_set_prompt(prompt); end
    def rl_set_signals; end
    def rl_setstate(x); end
    def rl_sigwinch_handler(sig); end
    def rl_stuff_char(key); end
    def rl_tab_insert(count, key); end
    def rl_tilde_expand(ignore, key); end
    def rl_translate_keyseq(seq); end
    def rl_transpose_chars(count, key); end
    def rl_transpose_words(count, key); end
    def rl_tty_set_default_bindings(kmap); end
    def rl_tty_unset_default_bindings(kmap); end
    def rl_undo_command(count, key); end
    def rl_unix_filename_rubout(count, key); end
    def rl_unix_line_discard(count, key); end
    def rl_unix_word_rubout(count, key); end
    def rl_unsetstate(x); end
    def rl_upcase_word(count, key); end
    def rl_username_completion_function(text, state); end
    def rl_variable_bind(name, value); end
    def rl_vi_check; end
    def rl_vi_editing_mode(count, key); end
    def rl_vi_insertion_mode(count, key); end
    def rl_yank(count, ignore); end
    def rl_yank_last_arg(count, key); end
    def rl_yank_nth_arg(count, ignore); end
    def rl_yank_nth_arg_internal(count, ignore, history_skip); end
    def rl_yank_pop(count, key); end
    def save_tty_chars; end
    def set_completion_defaults(what_to_do); end
    def sh_set_lines_and_columns(lines, cols); end
    def space_to_eol(count); end
    def stat_char(filename); end
    def stifle_history(max); end
    def tgetflag(name); end
    def trans(i); end
    def unstifle_history; end
    def update_line(old, ostart, new, current_line, omax, nmax, inv_botlin); end
    def using_history; end
    def vis_chars(line); end
    def vis_line(line); end
    def vis_llen(l); end
    def vis_pos(line); end
    def w_offset(line, offset); end
    def where_history; end
    def whitespace(c); end
  end
end

RbReadline::ABORT_CHAR = T.let(T.unsafe(nil), String)
RbReadline::ANCHORED_SEARCH = T.let(T.unsafe(nil), Integer)
RbReadline::ANYOTHERKEY = T.let(T.unsafe(nil), Integer)
RbReadline::AUDIBLE_BELL = T.let(T.unsafe(nil), Integer)
RbReadline::BAD_MODIFIER = T.let(T.unsafe(nil), Integer)
RbReadline::BAD_WORD_SPEC = T.let(T.unsafe(nil), Integer)
RbReadline::BFIND = T.let(T.unsafe(nil), Integer)
RbReadline::BTO = T.let(T.unsafe(nil), Integer)
RbReadline::CapCase = T.let(T.unsafe(nil), Integer)
RbReadline::DEFAULT_BUFFER_SIZE = T.let(T.unsafe(nil), Integer)
RbReadline::DEFAULT_INPUTRC = T.let(T.unsafe(nil), String)
RbReadline::DEFAULT_MAX_KILLS = T.let(T.unsafe(nil), Integer)
RbReadline::DownCase = T.let(T.unsafe(nil), Integer)
RbReadline::EOF = T.let(T.unsafe(nil), String)
RbReadline::ESC = T.let(T.unsafe(nil), String)
RbReadline::EVENT_NOT_FOUND = T.let(T.unsafe(nil), Integer)
RbReadline::FFIND = T.let(T.unsafe(nil), Integer)
RbReadline::FTO = T.let(T.unsafe(nil), Integer)
RbReadline::HISTORY_APPEND = T.let(T.unsafe(nil), Integer)
RbReadline::HISTORY_OVERWRITE = T.let(T.unsafe(nil), Integer)
RbReadline::HISTORY_QUOTE_CHARACTERS = T.let(T.unsafe(nil), String)
RbReadline::HISTORY_WORD_DELIMITERS = T.let(T.unsafe(nil), String)
RbReadline::ISFUNC = T.let(T.unsafe(nil), Integer)
RbReadline::ISKMAP = T.let(T.unsafe(nil), Integer)
RbReadline::ISMACR = T.let(T.unsafe(nil), Integer)
RbReadline::KEYMAP_SIZE = T.let(T.unsafe(nil), Integer)
RbReadline::KSEQ_DISPATCHED = T.let(T.unsafe(nil), Integer)
RbReadline::KSEQ_RECURSIVE = T.let(T.unsafe(nil), Integer)
RbReadline::KSEQ_SUBSEQ = T.let(T.unsafe(nil), Integer)
RbReadline::MB_FIND_ANY = T.let(T.unsafe(nil), Integer)
RbReadline::MB_FIND_NONZERO = T.let(T.unsafe(nil), Integer)
RbReadline::MB_LEN_MAX = T.let(T.unsafe(nil), Integer)
RbReadline::MULT_MATCH = T.let(T.unsafe(nil), Integer)
RbReadline::NEWLINE = T.let(T.unsafe(nil), String)
RbReadline::NON_ANCHORED_SEARCH = T.let(T.unsafe(nil), Integer)
RbReadline::NO_BELL = T.let(T.unsafe(nil), Integer)
RbReadline::NO_MATCH = T.let(T.unsafe(nil), Integer)
RbReadline::NO_PREV_SUBST = T.let(T.unsafe(nil), Integer)
RbReadline::NUM_READONE = T.let(T.unsafe(nil), Integer)
RbReadline::NUM_SAWDIGITS = T.let(T.unsafe(nil), Integer)
RbReadline::NUM_SAWMINUS = T.let(T.unsafe(nil), Integer)
RbReadline::PAGE = T.let(T.unsafe(nil), String)
RbReadline::RB_READLINE_VERSION = T.let(T.unsafe(nil), String)
RbReadline::READERR = T.let(T.unsafe(nil), String)
RbReadline::RETURN = T.let(T.unsafe(nil), String)
RbReadline::RL_IM_DEFAULT = T.let(T.unsafe(nil), Integer)
RbReadline::RL_IM_INSERT = T.let(T.unsafe(nil), Integer)
RbReadline::RL_IM_OVERWRITE = T.let(T.unsafe(nil), Integer)
RbReadline::RL_LIBRARY_VERSION = T.let(T.unsafe(nil), String)
RbReadline::RL_PROMPT_END_IGNORE = T.let(T.unsafe(nil), String)
RbReadline::RL_PROMPT_START_IGNORE = T.let(T.unsafe(nil), String)
RbReadline::RL_QF_BACKSLASH = T.let(T.unsafe(nil), Integer)
RbReadline::RL_QF_DOUBLE_QUOTE = T.let(T.unsafe(nil), Integer)
RbReadline::RL_QF_OTHER_QUOTE = T.let(T.unsafe(nil), Integer)
RbReadline::RL_QF_SINGLE_QUOTE = T.let(T.unsafe(nil), Integer)
RbReadline::RL_READLINE_VERSION = T.let(T.unsafe(nil), Integer)
RbReadline::RL_SEARCH_CSEARCH = T.let(T.unsafe(nil), Integer)
RbReadline::RL_SEARCH_ISEARCH = T.let(T.unsafe(nil), Integer)
RbReadline::RL_SEARCH_NSEARCH = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_CALLBACK = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_COMPLETING = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_DISPATCHING = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_DONE = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_INITIALIZED = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_INITIALIZING = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_INPUTPENDING = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_ISEARCH = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_MACRODEF = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_MACROINPUT = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_METANEXT = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_MOREINPUT = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_MULTIKEY = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_NONE = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_NSEARCH = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_NUMERICARG = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_OVERWRITE = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_READCMD = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_SEARCH = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_SIGHANDLER = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_TERMPREPPED = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_TTYCSAVED = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_UNDOING = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_VICMDONCE = T.let(T.unsafe(nil), Integer)
RbReadline::RL_STATE_VIMOTION = T.let(T.unsafe(nil), Integer)
RbReadline::RUBOUT = T.let(T.unsafe(nil), String)
RbReadline::SF_FAILED = T.let(T.unsafe(nil), Integer)
RbReadline::SF_FOUND = T.let(T.unsafe(nil), Integer)
RbReadline::SF_REVERSE = T.let(T.unsafe(nil), Integer)
RbReadline::SINGLE_MATCH = T.let(T.unsafe(nil), Integer)
RbReadline::SPACE = T.let(T.unsafe(nil), String)
RbReadline::SUBST_FAILED = T.let(T.unsafe(nil), Integer)
RbReadline::SYS_INPUTRC = T.let(T.unsafe(nil), String)
RbReadline::TAB = T.let(T.unsafe(nil), String)
RbReadline::UNDO_BEGIN = T.let(T.unsafe(nil), Integer)
RbReadline::UNDO_DELETE = T.let(T.unsafe(nil), Integer)
RbReadline::UNDO_END = T.let(T.unsafe(nil), Integer)
RbReadline::UNDO_INSERT = T.let(T.unsafe(nil), Integer)
RbReadline::UpCase = T.let(T.unsafe(nil), Integer)
RbReadline::VISIBLE_BELL = T.let(T.unsafe(nil), Integer)
RbReadline::XOK = T.let(T.unsafe(nil), Integer)

module Readline
  include ::RbReadline

  private

  def readline(prompt = T.unsafe(nil), add_history = T.unsafe(nil)); end

  class << self
    def basic_quote_characters; end
    def basic_quote_characters=(str); end
    def basic_word_break_characters; end
    def basic_word_break_characters=(str); end
    def completer_quote_characters; end
    def completer_quote_characters=(str); end
    def completer_word_break_characters; end
    def completer_word_break_characters=(str); end
    def completion_append_character; end
    def completion_append_character=(char); end
    def completion_case_fold; end
    def completion_case_fold=(bool); end
    def completion_proc; end
    def completion_proc=(proc); end
    def emacs_editing_mode; end
    def filename_quote_characters; end
    def filename_quote_characters=(str); end
    def input=(input); end
    def line_buffer; end
    def output=(output); end
    def point; end
    def readline(prompt = T.unsafe(nil), add_history = T.unsafe(nil)); end
    def readline_attempted_completion_function(text, start, _end); end
    def silence_warnings(&block); end
    def vi_editing_mode; end
  end
end

class Readline::Fcomp
  class << self
    def call(str); end
  end
end

class Readline::History
  extend ::Enumerable

  class << self
    def <<(str); end
    def [](index); end
    def []=(index, str); end
    def delete_at(index); end
    def each; end
    def empty?; end
    def length; end
    def pop; end
    def push(*args); end
    def rb_remove_history(index); end
    def shift; end
    def size; end
    def to_s; end
  end
end

class Readline::Ucomp
  class << self
    def call(str); end
  end
end
