# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `guard-rspec` gem.
# Please instead update this file by running `bin/tapioca gem guard-rspec`.

# typed: true

module Guard; end

class Guard::RSpec < ::Guard::Plugin
  def initialize(options = T.unsafe(nil)); end

  def options; end
  def options=(_arg0); end
  def reload; end
  def run_all; end
  def run_on_modifications(paths); end
  def runner; end
  def runner=(_arg0); end
  def start; end

  private

  def _throw_if_failed; end
end

class Guard::RSpec::Command < ::String
  def initialize(paths, options = T.unsafe(nil)); end

  def options; end
  def options=(_arg0); end
  def paths; end
  def paths=(_arg0); end

  private

  def _cmd_include_formatter?; end
  def _guard_formatter; end
  def _parts; end
  def _paths(options); end
  def _rspec_formatters; end
  def _visual_formatter; end
end

Guard::RSpec::Command::FAILURE_EXIT_CODE = T.let(T.unsafe(nil), Integer)

class Guard::RSpec::Deprecator
  def initialize(options = T.unsafe(nil)); end

  def options; end
  def options=(_arg0); end
  def warns_about_deprecated_options; end

  private

  def _deprecated(message); end
  def _exclude_option; end
  def _focus_on_failed_option; end
  def _keep_failed_option; end
  def _spec_opts_env; end
  def _use_cmd_option; end
  def _version_option; end

  class << self
    def warns_about_deprecated_options(options = T.unsafe(nil)); end
  end
end

module Guard::RSpec::Inspectors; end

class Guard::RSpec::Inspectors::BaseInspector
  def initialize(options = T.unsafe(nil)); end

  def failed(_locations); end
  def options; end
  def options=(_arg0); end
  def paths(_paths); end
  def reload; end
  def spec_paths; end
  def spec_paths=(_arg0); end

  private

  def _clean(paths); end
  def _collect_files(pattern); end
  def _paths_with_chdir(paths, chdir); end
  def _select_only_spec_dirs(paths); end
  def _select_only_spec_files(paths); end
  def _spec_paths_with_chdir; end
end

class Guard::RSpec::Inspectors::Factory
  class << self
    def create(options = T.unsafe(nil)); end
  end
end

class Guard::RSpec::Inspectors::FocusedInspector < ::Guard::RSpec::Inspectors::BaseInspector
  def initialize(options = T.unsafe(nil)); end

  def failed(locations); end
  def focused_locations; end
  def focused_locations=(_arg0); end
  def paths(paths); end
  def reload; end
end

class Guard::RSpec::Inspectors::KeepingInspector < ::Guard::RSpec::Inspectors::BaseInspector
  def initialize(options = T.unsafe(nil)); end

  def failed(locations); end
  def failed_locations; end
  def failed_locations=(_arg0); end
  def paths(paths); end
  def reload; end

  private

  def _location_path(location); end
  def _with_failed_locations(paths); end
end

class Guard::RSpec::Inspectors::SimpleInspector < ::Guard::RSpec::Inspectors::BaseInspector
  def failed(_locations); end
  def paths(paths); end
  def reload; end
end

class Guard::RSpec::Notifier
  def initialize(options = T.unsafe(nil)); end

  def notify(summary); end
  def notify_failure; end
  def options; end
  def options=(_arg0); end

  private

  def _image(failure_count, pending_count); end
  def _parse_summary(summary); end
  def _priority(image); end
end

module Guard::RSpec::Options
  class << self
    def with_defaults(options = T.unsafe(nil)); end

    private

    def _deep_merge(hash1, hash2); end
  end
end

Guard::RSpec::Options::DEFAULTS = T.let(T.unsafe(nil), Hash)

class Guard::RSpec::RSpecProcess
  def initialize(command, formatter_tmp_file, options = T.unsafe(nil)); end

  def all_green?; end
  def options; end
  def results; end

  private

  def _read_results; end
  def _really_run; end
  def _run; end
  def _warn_unless_absolute_path(formatter_tmp_file); end
  def _with_desired_bundler_env; end
  def command; end
  def exit_code; end
  def formatter_tmp_file; end
end

class Guard::RSpec::RSpecProcess::Failure < ::RuntimeError; end

class Guard::RSpec::Results
  def initialize(filename); end

  def failed_paths; end
  def summary; end
end

class Guard::RSpec::Results::InvalidData < ::RuntimeError; end

class Guard::RSpec::Runner
  def initialize(options = T.unsafe(nil)); end

  def inspector; end
  def inspector=(_arg0); end
  def notifier; end
  def notifier=(_arg0); end
  def options; end
  def options=(_arg0); end
  def reload; end
  def run(paths); end
  def run_all; end

  private

  def _open_launchy; end
  def _really_run(cmd, options); end
  def _results_file(results_file, chdir); end
  def _run(paths, options, &block); end
end

class Guard::RSpec::Runner::NoCmdOptionError < ::RuntimeError
  def initialize; end
end

class Guard::RSpecDefaults; end
Guard::RSpecDefaults::TEMPORARY_FILE_PATH = T.let(T.unsafe(nil), String)
